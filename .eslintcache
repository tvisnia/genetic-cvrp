[{"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\index.tsx":"1","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\App.tsx":"2","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\solutionGenerator.ts":"3","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\Const.ts":"4","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\helpers.ts":"5","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\algorithm\\algorithm.ts":"6"},{"size":188,"mtime":1610061994108,"results":"7","hashOfConfig":"8"},{"size":8567,"mtime":1610075186554,"results":"9","hashOfConfig":"8"},{"size":1132,"mtime":1610052725605,"results":"10","hashOfConfig":"8"},{"size":4063,"mtime":1610052521667,"results":"11","hashOfConfig":"8"},{"size":3693,"mtime":1610068013751,"results":"12","hashOfConfig":"8"},{"size":6929,"mtime":1610074780435,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"6ka3gw",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\index.tsx",[],["29","30"],"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\App.tsx",["31","32"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\nimport { geneticAlgorithm } from './algorithm/algorithm';\nimport { Solution } from './model/model';\nimport { analysePath } from './commons/helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [populationSize, setPopulationSize] = useState<number>(50);\n  const [generations, setGenerations] = useState<number>(100);\n\n  const [crossovers, setCrossovers] = useState<number>(0);\n  const [mutations, setMutations] = useState<number>(0);\n\n  const [bestStartQuality, setBestStartQuality] = useState<number>(0);\n  const [bestEndQuality, setBestEndQuality] = useState<number>(0);\n\n  const [bestCurrentQuality, setBestCurrentQuality] = useState<number>(0);\n  const [currentGeneration, setCurrentGeneration] = useState<number>(0);\n  const [isRunning, setIsRunning] = useState<boolean>(false);\n\n  const [startHover, setStartHover] = useState<boolean>(false);\n  const [resetHover, setResetHover] = useState<boolean>(false);\n\n  const [bestSolution, setBestSolution] = useState<Solution | null>(null);\n\n  const onPopulationSizeChange = (e: any) => {\n    const newData = e.target.value;\n    setPopulationSize(+newData);\n  };\n\n  const onGenerationsNumberChange = (e: any) => {\n    const newData = e.target.value;\n    setGenerations(+newData);\n  };\n\n  const onStart = () => {\n    if (!isRunning && !!+generations && !!+populationSize) {\n      setIsRunning(true);\n      setTimeout(() => {\n        const result = geneticAlgorithm(populationSize, generations);\n        setIsRunning(false);\n        const {\n          bestStartQuality,\n          bestEndQuality,\n          mutations,\n          crossovers,\n          solution,\n        } = result;\n        setBestStartQuality(bestStartQuality);\n        setBestEndQuality(bestEndQuality);\n        setMutations(mutations);\n        setCrossovers(crossovers);\n        setBestSolution(solution);\n      }, 100);\n    }\n  };\n\n  const onReset = () => {\n    if (!isRunning) {\n      setBestStartQuality(0);\n      setBestCurrentQuality(0);\n      setBestEndQuality(0);\n      setCurrentGeneration(0);\n      setCrossovers(0);\n      setMutations(0);\n      setBestSolution(null);\n    }\n  };\n\n  const toggleStartHover = () => {\n    setStartHover(!startHover);\n  };\n\n  const toggleResetHover = () => {\n    setResetHover(!resetHover);\n  };\n\n  return (\n    <div className='App'>\n      <div className='container'>\n        <h2>Zastosowanie algorytmu genetycznego do rozwiązania CVRP</h2>\n        <form className={classes.root} noValidate autoComplete='off'>\n          <TextField\n            defaultValue={populationSize}\n            onChange={onPopulationSizeChange}\n            id='filled-basic'\n            label='Rozmiar populacji'\n            variant='filled'\n          />\n          <TextField\n            defaultValue={generations}\n            onChange={onGenerationsNumberChange}\n            id='filled-basic'\n            label='Ilość generacji'\n            variant='filled'\n          />\n        </form>\n        <div className='buttons'>\n          <div\n            onClick={onStart}\n            id={startHover && !isRunning ? 'shadow' : undefined}\n            onMouseEnter={toggleStartHover}\n            onMouseLeave={toggleStartHover}\n            className={\n              isRunning ? 'startButtonDisabled' : 'startButtonEnabled'\n            }>\n            Start\n          </div>\n          <div\n            onClick={onReset}\n            id={resetHover && !isRunning ? 'shadow' : undefined}\n            onMouseEnter={toggleResetHover}\n            onMouseLeave={toggleResetHover}\n            className={\n              isRunning ? 'resetButtonDisabled' : 'resetButtonEnabled'\n            }>\n            Reset\n          </div>\n        </div>\n        {(isRunning || !!bestEndQuality) && (\n          <div className={'results'}>\n            <div className={'parameters'}>\n              <div\n                style={{\n                  fontSize: 11,\n                  fontWeight: 500,\n                  fontFamily: 'courier',\n                  color: 'white',\n                }}>\n                {`Jakość najlepszego rozwiązania populacji P0: ${bestStartQuality}`}\n              </div>\n              {isRunning && (\n                <div\n                  style={{\n                    marginTop: 10,\n                    fontSize: 11,\n                    fontWeight: 500,\n                    fontFamily: 'courier',\n                    color: 'white',\n                  }}>\n                  ...\n                </div>\n              )}\n              {!!bestEndQuality && (\n                <div\n                  style={{\n                    marginTop: 10,\n\n                    fontSize: 11,\n                    fontWeight: 500,\n                    fontFamily: 'courier',\n                    color: 'white',\n                  }}>\n                  {`Najlepsza jakość po wykonaniu algorytmu :${bestEndQuality}`}\n                </div>\n              )}\n              {!!bestSolution && (\n                <>\n                  <div\n                    style={{\n                      marginTop: 10,\n                      fontSize: 11,\n                      fontWeight: 500,\n                      fontFamily: 'courier',\n                      color: 'white',\n                    }}>\n                    {`Najlepsze rozwiązanie :`}\n                  </div>\n                  <div\n                    style={{\n                      fontSize: 11,\n                      fontWeight: 500,\n                      fontFamily: 'courier',\n                      color: 'white',\n                    }}>\n                    {`* Auto nr 1 : [${bestSolution[0].map(\n                      (c) => ` ${c.name} `\n                    )}], zapakowano: ${analysePath(bestSolution[0]).cost}`}\n                  </div>\n                  <div\n                    style={{\n                      fontSize: 11,\n                      fontWeight: 500,\n                      fontFamily: 'courier',\n                      color: 'white',\n                    }}>\n                    {`* Auto nr 2 : [${bestSolution[1].map(\n                      (c) => ` ${c.name} `\n                    )}], zapakowano: ${analysePath(bestSolution[1]).cost}`}\n                  </div>\n                  <div\n                    style={{\n                      fontSize: 11,\n                      fontWeight: 500,\n                      fontFamily: 'courier',\n                      color: 'white',\n                    }}>\n                    {`* Auto nr 3 : [${bestSolution[2].map(\n                      (c) => ` ${c.name} `\n                    )}], zapakowano: ${analysePath(bestSolution[2]).cost}`}\n                  </div>\n                  <div\n                    style={{\n                      fontSize: 11,\n                      fontWeight: 500,\n                      fontFamily: 'courier',\n                      color: 'white',\n                    }}>\n                    {`* Auto nr 4 : [${bestSolution[3].map(\n                      (c) => ` ${c.name} `\n                    )}], zapakowano: ${analysePath(bestSolution[3]).cost}`}\n                  </div>\n                  <div\n                    style={{\n                      fontSize: 11,\n                      fontWeight: 500,\n                      fontFamily: 'courier',\n                      color: 'white',\n                    }}>\n                    {`* Auto nr 5 : [${bestSolution[4].map(\n                      (c) => ` ${c.name} `\n                    )}], zapakowano: ${analysePath(bestSolution[4]).cost}`}\n                  </div>\n                </>\n              )}\n            </div>\n            <div className={'separator'} />\n            <div className={'generations'}>\n              <div\n                style={{\n                  fontSize: 11,\n                  fontWeight: 500,\n                  fontFamily: 'courier',\n                  color: 'white',\n                }}>\n                {`Udanych krzyżowań: ${crossovers}`}\n              </div>\n              <div\n                style={{\n                  fontSize: 11,\n                  fontWeight: 500,\n                  fontFamily: 'courier',\n                  color: 'white',\n                }}>\n                {`Udanych mutacji: ${mutations}`}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\solutionGenerator.ts",[],["33","34"],"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\Const.ts",[],"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\helpers.ts",[],"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\algorithm\\algorithm.ts",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":29,"column":10,"nodeType":"41","messageId":"42","endLine":29,"endColumn":28},{"ruleId":"39","severity":1,"message":"43","line":30,"column":10,"nodeType":"41","messageId":"42","endLine":30,"endColumn":27},{"ruleId":"35","replacedBy":"44"},{"ruleId":"37","replacedBy":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"@typescript-eslint/no-unused-vars","'bestCurrentQuality' is assigned a value but never used.","Identifier","unusedVar","'currentGeneration' is assigned a value but never used.",["46"],["47"],"no-global-assign","no-unsafe-negation"]