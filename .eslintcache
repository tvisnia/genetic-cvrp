[{"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\index.tsx":"1","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\App.tsx":"2","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\solutionGenerator.ts":"3","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\Const.ts":"4","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\helpers.ts":"5","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\algorithm\\algorithm.ts":"6"},{"size":195,"mtime":1610079840102,"results":"7","hashOfConfig":"8"},{"size":8834,"mtime":1610079840054,"results":"9","hashOfConfig":"8"},{"size":1132,"mtime":1610079840094,"results":"10","hashOfConfig":"8"},{"size":4063,"mtime":1610079840086,"results":"11","hashOfConfig":"8"},{"size":3693,"mtime":1610079840090,"results":"12","hashOfConfig":"8"},{"size":6929,"mtime":1610079840070,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"6ka3gw",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\index.tsx",[],["28","29"],"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\App.tsx",["30","31"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './App.css';\r\nimport { geneticAlgorithm } from './algorithm/algorithm';\r\nimport { Solution } from './model/model';\r\nimport { analysePath } from './commons/helpers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [populationSize, setPopulationSize] = useState<number>(50);\r\n  const [generations, setGenerations] = useState<number>(100);\r\n\r\n  const [crossovers, setCrossovers] = useState<number>(0);\r\n  const [mutations, setMutations] = useState<number>(0);\r\n\r\n  const [bestStartQuality, setBestStartQuality] = useState<number>(0);\r\n  const [bestEndQuality, setBestEndQuality] = useState<number>(0);\r\n\r\n  const [bestCurrentQuality, setBestCurrentQuality] = useState<number>(0);\r\n  const [currentGeneration, setCurrentGeneration] = useState<number>(0);\r\n  const [isRunning, setIsRunning] = useState<boolean>(false);\r\n\r\n  const [startHover, setStartHover] = useState<boolean>(false);\r\n  const [resetHover, setResetHover] = useState<boolean>(false);\r\n\r\n  const [bestSolution, setBestSolution] = useState<Solution | null>(null);\r\n\r\n  const onPopulationSizeChange = (e: any) => {\r\n    const newData = e.target.value;\r\n    setPopulationSize(+newData);\r\n  };\r\n\r\n  const onGenerationsNumberChange = (e: any) => {\r\n    const newData = e.target.value;\r\n    setGenerations(+newData);\r\n  };\r\n\r\n  const onStart = () => {\r\n    if (!isRunning && !!+generations && !!+populationSize) {\r\n      setIsRunning(true);\r\n      setTimeout(() => {\r\n        const result = geneticAlgorithm(populationSize, generations);\r\n        setIsRunning(false);\r\n        const {\r\n          bestStartQuality,\r\n          bestEndQuality,\r\n          mutations,\r\n          crossovers,\r\n          solution,\r\n        } = result;\r\n        setBestStartQuality(bestStartQuality);\r\n        setBestEndQuality(bestEndQuality);\r\n        setMutations(mutations);\r\n        setCrossovers(crossovers);\r\n        setBestSolution(solution);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  const onReset = () => {\r\n    if (!isRunning) {\r\n      setBestStartQuality(0);\r\n      setBestCurrentQuality(0);\r\n      setBestEndQuality(0);\r\n      setCurrentGeneration(0);\r\n      setCrossovers(0);\r\n      setMutations(0);\r\n      setBestSolution(null);\r\n    }\r\n  };\r\n\r\n  const toggleStartHover = () => {\r\n    setStartHover(!startHover);\r\n  };\r\n\r\n  const toggleResetHover = () => {\r\n    setResetHover(!resetHover);\r\n  };\r\n\r\n  return (\r\n    <div className='App'>\r\n      <div className='container'>\r\n        <h2>Zastosowanie algorytmu genetycznego do rozwiązania CVRP</h2>\r\n        <form className={classes.root} noValidate autoComplete='off'>\r\n          <TextField\r\n            defaultValue={populationSize}\r\n            onChange={onPopulationSizeChange}\r\n            id='filled-basic'\r\n            label='Rozmiar populacji'\r\n            variant='filled'\r\n          />\r\n          <TextField\r\n            defaultValue={generations}\r\n            onChange={onGenerationsNumberChange}\r\n            id='filled-basic'\r\n            label='Ilość generacji'\r\n            variant='filled'\r\n          />\r\n        </form>\r\n        <div className='buttons'>\r\n          <div\r\n            onClick={onStart}\r\n            id={startHover && !isRunning ? 'shadow' : undefined}\r\n            onMouseEnter={toggleStartHover}\r\n            onMouseLeave={toggleStartHover}\r\n            className={\r\n              isRunning ? 'startButtonDisabled' : 'startButtonEnabled'\r\n            }>\r\n            Start\r\n          </div>\r\n          <div\r\n            onClick={onReset}\r\n            id={resetHover && !isRunning ? 'shadow' : undefined}\r\n            onMouseEnter={toggleResetHover}\r\n            onMouseLeave={toggleResetHover}\r\n            className={\r\n              isRunning ? 'resetButtonDisabled' : 'resetButtonEnabled'\r\n            }>\r\n            Reset\r\n          </div>\r\n        </div>\r\n        {(isRunning || !!bestEndQuality) && (\r\n          <div className={'results'}>\r\n            <div className={'parameters'}>\r\n              <div\r\n                style={{\r\n                  fontSize: 11,\r\n                  fontWeight: 500,\r\n                  fontFamily: 'courier',\r\n                  color: 'white',\r\n                }}>\r\n                {`Jakość najlepszego rozwiązania populacji P0: ${bestStartQuality}`}\r\n              </div>\r\n              {isRunning && (\r\n                <div\r\n                  style={{\r\n                    marginTop: 10,\r\n                    fontSize: 11,\r\n                    fontWeight: 500,\r\n                    fontFamily: 'courier',\r\n                    color: 'white',\r\n                  }}>\r\n                  ...\r\n                </div>\r\n              )}\r\n              {!!bestEndQuality && (\r\n                <div\r\n                  style={{\r\n                    marginTop: 10,\r\n\r\n                    fontSize: 11,\r\n                    fontWeight: 500,\r\n                    fontFamily: 'courier',\r\n                    color: 'white',\r\n                  }}>\r\n                  {`Najlepsza jakość po wykonaniu algorytmu :${bestEndQuality}`}\r\n                </div>\r\n              )}\r\n              {!!bestSolution && (\r\n                <>\r\n                  <div\r\n                    style={{\r\n                      marginTop: 10,\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`Najlepsze rozwiązanie :`}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`* Auto nr 1 : [${bestSolution[0].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[0]).cost}`}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`* Auto nr 2 : [${bestSolution[1].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[1]).cost}`}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`* Auto nr 3 : [${bestSolution[2].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[2]).cost}`}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`* Auto nr 4 : [${bestSolution[3].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[3]).cost}`}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`* Auto nr 5 : [${bestSolution[4].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[4]).cost}`}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className={'separator'} />\r\n            <div className={'generations'}>\r\n              <div\r\n                style={{\r\n                  fontSize: 11,\r\n                  fontWeight: 500,\r\n                  fontFamily: 'courier',\r\n                  color: 'white',\r\n                }}>\r\n                {`Udanych krzyżowań: ${crossovers}`}\r\n              </div>\r\n              <div\r\n                style={{\r\n                  fontSize: 11,\r\n                  fontWeight: 500,\r\n                  fontFamily: 'courier',\r\n                  color: 'white',\r\n                }}>\r\n                {`Udanych mutacji: ${mutations}`}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\solutionGenerator.ts",[],"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\Const.ts",[],"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\commons\\helpers.ts",[],"C:\\Users\\User\\Desktop\\genetic-cvrp\\src\\algorithm\\algorithm.ts",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":29,"column":10,"nodeType":"38","messageId":"39","endLine":29,"endColumn":28},{"ruleId":"36","severity":1,"message":"40","line":30,"column":10,"nodeType":"38","messageId":"39","endLine":30,"endColumn":27},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"@typescript-eslint/no-unused-vars","'bestCurrentQuality' is assigned a value but never used.","Identifier","unusedVar","'currentGeneration' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]