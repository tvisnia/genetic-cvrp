{"version":3,"sources":["commons/Const.ts","commons/helpers.ts","commons/solutionGenerator.ts","algorithm/algorithm.ts","App.tsx","index.tsx"],"names":["cities","id","latitude","longitude","demand","name","CAPACITY","SET_PROBABILITY_0_20","analysePath","path","cost","map","city","reduce","previous","current","isValid","getRandomInt","min","maxExclusive","Math","ceil","floor","random","getPathDistance","total","currentCity","currentIndex","previousCity","nextCity","city1","city2","round","sqrt","pow","copyPopulation","pop","slice","sol","copyPath","copySolution","getSolutionQuality","solution","acc","CompareSolutionsByDistanceAscending","prevSolution","nextSolution","hasPathCity","findIndex","c","generateRandomSolution","citiesCopy","forEach","randomCityId","length","push","splice","randomCityIndex","randomCityDemand","freeCarIndex","geneticAlgorithm","basePopulationCount","generations","count","basePopulation","Array","sort","basePopulationCopy","bestStartQuality","crossovers","mutations","_","generationIndex","population","lastIndex","freeSolutionIndexes","index","randomSolution1Index","randomSolution2Index","getSolutionsForCrossover","randomSolution1","randomSolution2","cityA","indexCityB","cityB","bCityPathIndexIn1","bCityPathIndexIn2","aCityPathIndexIn2","bCityIndexInPath1","bCityIndexInPath2","aCityIndexInPath2","solution1Quality","solution2Quality","currentBestQuality","s","newBestSolution","mutateRandomIndex","randomSolutionIndex","randomSolution","randomSolutionInitialQuality","randomPath","randomCityIndex1","randomCityIndex2","abs","bestEndSolution","bestEndQuality","styles","textStyle","fontSize","fontWeight","fontFamily","color","withMargin","marginTop","useStyles","makeStyles","theme","root","margin","spacing","width","App","classes","useState","populationSize","setPopulationSize","setGenerations","setCrossovers","setMutations","setBestStartQuality","setBestEndQuality","isRunning","setIsRunning","startHover","setStartHover","resetHover","setResetHover","bestSolution","setBestSolution","toggleStartHover","toggleResetHover","className","noValidate","autoComplete","TextField","defaultValue","onChange","e","newData","target","value","label","variant","onClick","setTimeout","result","undefined","onMouseEnter","onMouseLeave","style","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.1af962c4.chunk.js","sourcesContent":["import { City } from \"./../model/model\";\n\nexport const cities: City[] = [\n  {\n    id: 0,\n    latitude: 50.062958,\n    longitude: 19.938377,\n    demand: 0,\n    name: \"Kraków\",\n  },\n  {\n    id: 1,\n    latitude: 53.1276046,\n    longitude: 23.0858554,\n    demand: 500,\n    name: \"Białystok\",\n  },\n  {\n    id: 2,\n    latitude: 49.8121789,\n    longitude: 18.9670518,\n    demand: 50,\n    name: \"Bielsko-Biała\",\n  },\n  {\n    id: 3,\n    latitude: 50.1287598,\n    longitude: 19.2884881,\n    demand: 400,\n    name: \"Chrzanów\",\n  },\n  {\n    id: 4,\n    latitude: 54.3610059,\n    longitude: 18.5496047,\n    demand: 200,\n    name: \"Gdańsk\",\n  },\n  {\n    id: 5,\n    latitude: 54.5038045,\n    longitude: 18.3932687,\n    demand: 100,\n    name: \"Gdynia\",\n  },\n  {\n    id: 6,\n    latitude: 50.3012185,\n    longitude: 18.3932687,\n    demand: 40,\n    name: \"Gliwice\",\n  },\n  {\n    id: 7,\n    latitude: 49.8390228,\n    longitude: 20.9450616,\n    demand: 200,\n    name: \"Gromnik\",\n  },\n  {\n    id: 8,\n    latitude: 50.2136512,\n    longitude: 18.9369822,\n    demand: 300,\n    name: \"Katowice\",\n  },\n  {\n    id: 9,\n    latitude: 50.8540189,\n    longitude: 20.5454309,\n    demand: 30,\n    name: \"Kielce\",\n  },\n  {\n    id: 10,\n    latitude: 49.6896495,\n    longitude: 21.7166586,\n    demand: 60,\n    name: \"Krosno\",\n  },\n  {\n    id: 11,\n    latitude: 49.4154478,\n    longitude: 20.898955,\n    demand: 50,\n    name: \"Krynica\",\n  },\n  {\n    id: 12,\n    latitude: 51.218088,\n    longitude: 22.4935597,\n    demand: 60,\n    name: \"Lublin\",\n  },\n  {\n    id: 13,\n    latitude: 51.7730343,\n    longitude: 19.3401699,\n    demand: 160,\n    name: \"Łódź\",\n  },\n  {\n    id: 14,\n    latitude: 54.0286482,\n    longitude: 19.0084415,\n    demand: 100,\n    name: \"Malbork\",\n  },\n  {\n    id: 15,\n    latitude: 49.4892464,\n    longitude: 19.9737208,\n    demand: 120,\n    name: \"Nowy Targ\",\n  },\n  {\n    id: 16,\n    latitude: 53.7759903,\n    longitude: 20.3956593,\n    demand: 300,\n    name: \"Olsztyn\",\n  },\n  {\n    id: 17,\n    latitude: 52.4004458,\n    longitude: 16.7615834,\n    demand: 100,\n    name: \"Poznań\",\n  },\n  {\n    id: 18,\n    latitude: 51.4254995,\n    longitude: 21.9046281,\n    demand: 200,\n    name: \"Puławy\",\n  },\n  {\n    id: 19,\n    latitude: 51.4150447,\n    longitude: 21.0839343,\n    demand: 100,\n    name: \"Radom\",\n  },\n  {\n    id: 20,\n    latitude: 50.0054089,\n    longitude: 21.9184153,\n    demand: 60,\n    name: \"Rzeszów\",\n  },\n  {\n    id: 21,\n    latitude: 50.6780941,\n    longitude: 21.675572,\n    demand: 200,\n    name: \"Sandomierz\",\n  },\n  {\n    id: 22,\n    latitude: 53.4296143,\n    longitude: 14.4845414,\n    demand: 150,\n    name: \"Szczecin\",\n  },\n  {\n    id: 23,\n    latitude: 50.3096329,\n    longitude: 21.0617624,\n    demand: 60,\n    name: \"Szczucin\",\n  },\n  {\n    id: 24,\n    latitude: 50.8142546,\n    longitude: 15.3965229,\n    demand: 50,\n    name: \"Szklarska Poręba\",\n  },\n  {\n    id: 25,\n    latitude: 50.0261227,\n    longitude: 20.9068665,\n    demand: 70,\n    name: \"Tarnów\",\n  },\n  {\n    id: 26,\n    latitude: 52.232855,\n    longitude: 20.9211117,\n    demand: 200,\n    name: \"Warszawa\",\n  },\n  {\n    id: 27,\n    latitude: 49.9875567,\n    longitude: 20.0286001,\n    demand: 90,\n    name: \"Wieliczka\",\n  },\n  {\n    id: 28,\n    latitude: 51.1269942,\n    longitude: 16.8517813,\n    demand: 40,\n    name: \"Wrocław\",\n  },\n  {\n    id: 29,\n    latitude: 49.27587,\n    longitude: 19.9036652,\n    demand: 200,\n    name: \"Zakopane\",\n  },\n  {\n    id: 30,\n    latitude: 50.7213772,\n    longitude: 23.2134076,\n    demand: 300,\n    name: \"Zamość\",\n  },\n];\n\nexport const CAPACITY: number = 1000;\n\nexport const DEGREE_TO_KILOMETERS_FACTOR = 111.196672;\n\nexport const SET_PROBABILITY_0_20 = [\n  2,\n  2,\n  2,\n  1,\n  3,\n  1,\n  3,\n  1,\n  3,\n  1,\n  3,\n  1,\n  3,\n  2,\n  1,\n  3,\n  1,\n  3,\n  1,\n  2,\n  3,\n  1,\n  3,\n  1,\n  3,\n];\n","import { CAPACITY, DEGREE_TO_KILOMETERS_FACTOR, cities } from \"./Const\";\nimport { Path, PathInfo, Solution, Population, City } from \"./../model/model\";\n\nexport const isValidPath = (path: Path): boolean =>\n  path\n    .map((city) => city.demand)\n    .reduce((previous, current) => previous + current) <= CAPACITY;\n\nexport const analysePath = (path: Path): PathInfo => {\n  const cost = path\n    .map((city) => city.demand)\n    .reduce((previous, current) => previous + current);\n  const isValid = cost <= CAPACITY;\n  return {\n    cost,\n    isValid,\n  };\n};\n\nexport const analyseSolution = (solution: Solution) => {\n  const citiesIds: number[] = [];\n  solution.forEach((path) => path.forEach((city) => citiesIds.push(city.id)));\n  solution.forEach((path) => console.log(analysePath(path).isValid));\n  citiesIds.sort();\n  console.log(citiesIds);\n  console.log(`equal : ${new Set(citiesIds).size === citiesIds.length}`);\n};\n\nexport const getRandomInt = (min: number, maxExclusive: number) => {\n  min = Math.ceil(min);\n  maxExclusive = Math.floor(maxExclusive);\n  return Math.floor(Math.random() * (maxExclusive - min)) + min;\n};\n\nexport const getCitiesDistance = (city1: City, city2: City): number =>\n  Math.round(\n    Math.sqrt(\n      Math.pow(city1.longitude - city2.longitude, 2) +\n        Math.pow(city1.latitude - city2.latitude, 2)\n    ) * DEGREE_TO_KILOMETERS_FACTOR\n  );\n\nexport const getPathDistance = (path: Path): number =>\n  path.reduce((total, currentCity, currentIndex) => {\n    let previousCity: City;\n    let nextCity: City;\n    if (currentIndex === 0) {\n      previousCity = cities[0]; //Kraków\n      nextCity = currentCity;\n    } else {\n      nextCity = currentCity;\n      previousCity = path[currentIndex - 1];\n    }\n    return !!nextCity && !!previousCity\n      ? total + getCitiesDistance(previousCity, nextCity)\n      : total;\n  }, 0);\n\nexport const copyPath = (path: Path): Path => path.slice();\n\nexport const copySolution = (sol: Solution): Solution =>\n  sol.slice().map((path) => copyPath(path));\n\nexport const copyPopulation = (pop: Population): Population =>\n  pop.slice().map((sol) => copySolution(sol));\n\nexport const getSolutionQuality = (solution: Solution): number =>\n  solution.reduce((acc, path) => (acc += getPathDistance(path)), 0);\n\nexport const CompareSolutionsByDistanceAscending = (\n  prevSolution: Solution,\n  nextSolution: Solution\n) => getSolutionQuality(prevSolution) - getSolutionQuality(nextSolution);\n\nexport const getRandomSolutions = (population: Population): Population => {\n  //tworzenie populacji tymczasowej - reprodukcja obcinająca\n  const temporaryPopulation = population.slice(\n    0,\n    Math.round(population.length / 2)\n  );\n  const lastIndex = temporaryPopulation.length - 1;\n  const freeSolutionIndexes = [...Array(lastIndex + 1)].map(\n    (_, index) => index\n  );\n  const randomSolution1Index =\n    freeSolutionIndexes[getRandomInt(0, lastIndex + 1)];\n  freeSolutionIndexes.splice(randomSolution1Index, 1);\n  const randomSolution2Index = freeSolutionIndexes[getRandomInt(0, lastIndex)];\n  freeSolutionIndexes.splice(randomSolution2Index, 1);\n  const randomSolution1: Solution = [...population[randomSolution1Index]];\n  const randomSolution2: Solution = [...population[randomSolution2Index]];\n  return [randomSolution1, randomSolution2];\n};\n\nexport const hasPathCity = (path: Path, city: City) =>\n  !!~path.findIndex((c) => c.id === city.id);\n","import { CAPACITY } from \"./Const\";\nimport { getRandomInt, analysePath } from \"./helpers\";\nimport { City, Population, Solution } from \"./../model/model\";\n\nexport const generateRandomPopulation = (\n  count: number,\n  cities: City[]\n): Population => [...Array(count)].map(() => generateRandomSolution(cities));\n\nexport const generateRandomSolution = (cities: City[]): Solution => {\n  const solution: Solution = [[], [], [], [], []];\n  const citiesCopy = cities.slice();\n\n  solution.forEach((path) => {\n    const randomCityId = getRandomInt(1, citiesCopy.length);\n    path.push(citiesCopy[randomCityId]);\n    citiesCopy.splice(randomCityId, 1);\n  });\n\n  while (citiesCopy.length > 1) {\n    const randomCityIndex = getRandomInt(1, citiesCopy.length);\n    const randomCityDemand = citiesCopy[randomCityIndex].demand;\n    const freeCarIndex = solution.findIndex(\n      (path) => analysePath(path).cost + randomCityDemand <= CAPACITY\n    );\n    if (~freeCarIndex) {\n      solution[freeCarIndex].push(citiesCopy[randomCityIndex]);\n      citiesCopy.splice(randomCityIndex, 1);\n    }\n  }\n  return solution;\n};\n","import { generateRandomPopulation } from \"./../commons/solutionGenerator\";\nimport { SET_PROBABILITY_0_20, cities } from \"./../commons/Const\";\nimport {\n  City,\n  Path,\n  Solution,\n  Population,\n  AlgorithmResult,\n} from \"./../model/model\";\nimport {\n  CompareSolutionsByDistanceAscending,\n  getSolutionQuality,\n  getRandomSolutions as getSolutionsForCrossover,\n  getRandomInt,\n  hasPathCity,\n  copyPopulation,\n} from \"./../commons/helpers\";\n\nexport const geneticAlgorithm = (\n  basePopulationCount: number,\n  generations: number\n): AlgorithmResult => {\n  const basePopulation: Population = generateRandomPopulation(\n    basePopulationCount,\n    cities\n  );\n  basePopulation.sort(CompareSolutionsByDistanceAscending);\n\n  let basePopulationCopy: Population = copyPopulation(basePopulation);\n\n  let bestStartQuality = getSolutionQuality(basePopulation[0]);\n  let crossovers = 0;\n  let mutations = 0;\n\n  [...Array(generations)].forEach((_, generationIndex) => {\n    //przygotowanie do krzyżowania -losowanie dwóch osobników/rozwiązań z populacji tymczasowej\n    const [randomSolution1, randomSolution2] = getSolutionsForCrossover(\n      basePopulationCopy\n    );\n    const aCityPathIndexIn1 = 0;\n    const aCityIndexInPath1 = 0;\n    const cityA: City = randomSolution1[aCityPathIndexIn1][aCityIndexInPath1];\n    const indexCityB = cities.findIndex(\n      (city) => city.demand === cityA.demand && city.id !== cityA.id\n    );\n\n    if (~indexCityB) {\n      // 1 warunek krzyżowania spełniony - znaleziono miasto o tym samym zapotrzebowaniu na towar\n      const cityB = cities[indexCityB];\n\n      const bCityPathIndexIn1 = randomSolution1.findIndex((path: Path) =>\n        hasPathCity(path, cityB)\n      );\n      const bCityPathIndexIn2 = randomSolution2.findIndex((path: Path) =>\n        hasPathCity(path, cityB)\n      );\n      const aCityPathIndexIn2 = randomSolution2.findIndex((path: Path) =>\n        hasPathCity(path, cityA)\n      );\n\n      // zamiana w pierwszym rozwiązaniu\n      const bCityIndexInPath1 = randomSolution1[bCityPathIndexIn1].findIndex(\n        (city: City) => city.id === cityB.id\n      );\n\n      randomSolution1[aCityPathIndexIn1][aCityIndexInPath1] = cityB; // zamiana A -> B\n      randomSolution1[bCityPathIndexIn1][bCityIndexInPath1] = cityA; //zamiana B -> A\n\n      //zamiana w drugim rozwiązaniu\n      const bCityIndexInPath2 = randomSolution2[bCityPathIndexIn2].findIndex(\n        (city: City) => city.id === cityB.id\n      );\n      const aCityIndexInPath2 = randomSolution2[aCityPathIndexIn2].findIndex(\n        (city: City) => city.id === cityA.id\n      );\n\n      randomSolution2[aCityPathIndexIn2][aCityIndexInPath2] = cityB; // zamiana A -> B\n      randomSolution2[bCityPathIndexIn2][bCityIndexInPath2] = cityA; // zamiana B -> A\n\n      const solution1Quality = getSolutionQuality(randomSolution1);\n      const solution2Quality = getSolutionQuality(randomSolution2);\n      const currentBestQuality = basePopulation.map((s: Solution) =>\n        getSolutionQuality(s)\n      )[0];\n\n      const newBestSolution =\n        solution1Quality === solution2Quality\n          ? randomSolution2\n          : solution1Quality < solution2Quality\n          ? randomSolution1\n          : randomSolution2;\n      const newBestQuality = getSolutionQuality(newBestSolution);\n      if (newBestQuality < currentBestQuality) {\n        basePopulation.splice(basePopulation.length - 1, 1);\n        basePopulation.push(newBestSolution);\n        basePopulation.sort(CompareSolutionsByDistanceAscending);\n        crossovers++;\n      }\n      basePopulationCopy = copyPopulation(basePopulation);\n    }\n    \n    //mutacja\n    const mutateRandomIndex = getRandomInt(0, SET_PROBABILITY_0_20.length);\n    const mutateOn: boolean = SET_PROBABILITY_0_20[mutateRandomIndex] % 2 === 0;\n\n    if (mutateOn) {\n      const randomSolutionIndex = getRandomInt(0, basePopulationCopy.length);\n      const randomSolution = basePopulationCopy[randomSolutionIndex];\n      const randomSolutionInitialQuality = getSolutionQuality(randomSolution);\n      const randomPathIndex = getRandomInt(0, randomSolution.length);\n      const randomPath = randomSolution[randomPathIndex];\n      const randomCityIndex1 = getRandomInt(0, randomPath.length);\n      const randomCityIndex2 = Math.abs(randomCityIndex1 - 1);\n      const cityA = randomPath[randomCityIndex1];\n      const cityB = randomPath[randomCityIndex2];\n      randomPath[randomCityIndex1] = cityB;\n      randomPath[randomCityIndex2] = cityA;\n      const randomSolutionPostMutationQuality = getSolutionQuality(\n        randomSolution\n      );\n      if (randomSolutionInitialQuality > randomSolutionPostMutationQuality) {\n        mutations++;\n        if (randomSolutionIndex === 0)\n          basePopulation[randomSolutionIndex] = randomSolution;\n      }\n      basePopulationCopy = copyPopulation(basePopulation);\n      basePopulation.sort(CompareSolutionsByDistanceAscending);\n    }\n  }); //zakres pętli - koniec algorytmu\n\n  const bestEndSolution = basePopulation[0];\n  const bestEndQuality = getSolutionQuality(bestEndSolution);\n  return {\n    bestStartQuality,\n    bestEndQuality,\n    crossovers,\n    mutations,\n    bestEndSolution,\n  };\n};\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { geneticAlgorithm } from \"./algorithm/algorithm\";\nimport { analysePath } from \"./commons/helpers\";\nimport \"./App.css\";\nimport { Solution } from \"./model/model\";\n\nfunction App() {\n  const classes = useStyles();\n  const [populationSize, setPopulationSize] = useState<number>(30);\n  const [generations, setGenerations] = useState<number>(25000);\n\n  const [crossovers, setCrossovers] = useState<number>(0);\n  const [mutations, setMutations] = useState<number>(0);\n\n  const [bestStartQuality, setBestStartQuality] = useState<number>(0);\n  const [bestEndQuality, setBestEndQuality] = useState<number>(0);\n\n  const [isRunning, setIsRunning] = useState<boolean>(false);\n\n  const [startHover, setStartHover] = useState<boolean>(false);\n  const [resetHover, setResetHover] = useState<boolean>(false);\n\n  const [bestSolution, setBestSolution] = useState<Solution | null>(null);\n\n  const onPopulationSizeChange = (e: any) => {\n    const newData = e.target.value;\n    setPopulationSize(+newData);\n  };\n\n  const onGenerationsNumberChange = (e: any) => {\n    const newData = e.target.value;\n    setGenerations(+newData);\n  };\n\n  const onStart = () => {\n    if (\n      !isRunning &&\n      !!+generations &&\n      !!+populationSize &&\n      +populationSize !== 1\n    ) {\n      setIsRunning(true);\n      setTimeout(() => {\n        const result = geneticAlgorithm(populationSize, generations);\n        setIsRunning(false);\n        const {\n          bestStartQuality,\n          bestEndQuality,\n          mutations,\n          crossovers,\n          bestEndSolution,\n        } = result;\n        setBestStartQuality(bestStartQuality);\n        setBestEndQuality(bestEndQuality);\n        setMutations(mutations);\n        setCrossovers(crossovers);\n        setBestSolution(bestEndSolution);\n      }, 100);\n    }\n  };\n\n  const onReset = () => {\n    if (!isRunning) {\n      setBestStartQuality(0);\n      setBestEndQuality(0);\n      setCrossovers(0);\n      setMutations(0);\n      setBestSolution(null);\n    }\n  };\n\n  const toggleStartHover = () => {\n    setStartHover(!startHover);\n  };\n\n  const toggleResetHover = () => {\n    setResetHover(!resetHover);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h2>Zastosowanie algorytmu genetycznego do rozwiązania CVRP</h2>\n        <form className={classes.root} noValidate autoComplete=\"off\">\n          <TextField\n            defaultValue={populationSize}\n            onChange={onPopulationSizeChange}\n            id=\"filled-basic\"\n            label=\"Rozmiar populacji\"\n            variant=\"filled\"\n          />\n          <TextField\n            defaultValue={generations}\n            onChange={onGenerationsNumberChange}\n            id=\"filled-basic\"\n            label=\"Ilość generacji\"\n            variant=\"filled\"\n          />\n        </form>\n        <div className=\"buttons\">\n          <div\n            onClick={onStart}\n            id={startHover && !isRunning ? \"shadow\" : undefined}\n            onMouseEnter={toggleStartHover}\n            onMouseLeave={toggleStartHover}\n            className={isRunning ? \"startButtonDisabled\" : \"startButtonEnabled\"}\n          >\n            Start\n          </div>\n          <div\n            onClick={onReset}\n            id={resetHover && !isRunning ? \"shadow\" : undefined}\n            onMouseEnter={toggleResetHover}\n            onMouseLeave={toggleResetHover}\n            className={isRunning ? \"resetButtonDisabled\" : \"resetButtonEnabled\"}\n          >\n            Reset\n          </div>\n        </div>\n        {(isRunning || !!bestEndQuality) && (\n          <div className={\"results\"}>\n            <div className={\"parameters\"}>\n              <div style={styles.textStyle}>\n                {`Jakość najlepszego rozwiązania populacji P0 : ${bestStartQuality}`}\n              </div>\n              {isRunning && <div style={styles.withMargin}>...</div>}\n              {!!bestEndQuality && (\n                <div\n                  style={{\n                    marginTop: 10,\n\n                    fontSize: 11,\n                    fontWeight: 500,\n                    fontFamily: \"Courier New\",\n                    color: \"white\",\n                  }}\n                >\n                  {`Jakość najlepszego rozwiązania po egzekucji algorytmu : ${bestEndQuality}`}\n                </div>\n              )}\n              {!!bestSolution && (\n                <>\n                  <div style={styles.withMargin}>\n                    {`Najlepsze rozwiązanie :`}\n                  </div>\n                  <div style={styles.textStyle}>\n                    {`* Auto nr 1 : [${bestSolution[0].map(\n                      (c) => ` ${c.name} `\n                    )}], zapakowano: ${analysePath(bestSolution[0]).cost}`}\n                  </div>\n                  <div style={styles.textStyle}>\n                    {`* Auto nr 2 : [${bestSolution[1].map(\n                      (c) => ` ${c.name} `\n                    )}], zapakowano: ${analysePath(bestSolution[1]).cost}`}\n                  </div>\n                  <div style={styles.textStyle}>\n                    {`* Auto nr 3 : [${bestSolution[2].map(\n                      (c) => ` ${c.name} `\n                    )}], zapakowano: ${analysePath(bestSolution[2]).cost}`}\n                  </div>\n                  <div style={styles.textStyle}>\n                    {`* Auto nr 4 : [${bestSolution[3].map(\n                      (c) => ` ${c.name} `\n                    )}], zapakowano: ${analysePath(bestSolution[3]).cost}`}\n                  </div>\n                  <div style={styles.textStyle}>\n                    {`* Auto nr 5 : [${bestSolution[4].map(\n                      (c) => ` ${c.name} `\n                    )}], zapakowano: ${analysePath(bestSolution[4]).cost}`}\n                  </div>\n                </>\n              )}\n            </div>\n            <div className={\"separator\"} />\n            <div className={\"generations\"}>\n              <div style={styles.textStyle}>\n                {`Udanych krzyżowań : ${crossovers}`}\n              </div>\n              <div style={styles.textStyle}>\n                {`Udanych mutacji : ${mutations}`}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  textStyle: {\n    fontSize: 11,\n    fontWeight: 500,\n    fontFamily: \"Courier New\",\n    color: \"white\",\n  },\n  withMargin: {\n    marginTop: 10,\n    fontSize: 11,\n    fontWeight: 500,\n    fontFamily: \"Courier New\",\n    color: \"white\",\n  },\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n  },\n}));\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './App.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}