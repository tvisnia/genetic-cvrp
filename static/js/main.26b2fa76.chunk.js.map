{"version":3,"sources":["commons/Const.ts","commons/helpers.ts","commons/solutionGenerator.ts","algorithm/algorithm.ts","App.tsx","index.tsx"],"names":["cities","id","latitude","longitude","demand","name","CAPACITY","SET_PROBABILITY_0_20","analysePath","path","cost","map","city","reduce","previous","current","isValid","getRandomInt","min","maxExclusive","Math","ceil","floor","random","getPathDistance","total","currentCity","currentIndex","previousCity","nextCity","city1","city2","round","sqrt","pow","copyPath","slice","Object","assign","copyCity","copyPopulation","pop","sol","copySolution","getSolutionQuality","solution","acc","hasPathCity","findIndex","c","generateRandomSolution","citiesCopy","forEach","randomCityId","length","push","splice","randomCityIndex","randomCityDemand","freeCarIndex","geneticAlgorithm","basePopulationCount","generations","count","basePopulation","Array","sort","prevSolution","nextSolution","basePopulationCopy","bestStartQuality","crossovers","mutations","console","log","s","_","generationIndex","population","lastIndex","freeSolutionIndexes","index","randomSolution1Index","randomSolution2Index","getRandomSolutions","randomSolution1","randomSolution2","cityA","indexCityB","cityB","bCityPathIndexIn1","bCityPathIndexIn2","aCityPathIndexIn2","bCityIndexInPath1","bCityIndexInPath2","aCityIndexInPath2","solution1Quality","solution2Quality","currentBestQuality","newBestSolution","mutateRandomIndex","randomSolutionIndex","randomSolution","randomSolutionInitialQuality","randomPath","randomCityIndex1","randomCityIndex2","abs","bestEndQuality","useStyles","makeStyles","theme","root","margin","spacing","width","App","classes","useState","populationSize","setPopulationSize","setGenerations","setCrossovers","setMutations","setBestStartQuality","setBestEndQuality","isRunning","setIsRunning","startHover","setStartHover","resetHover","setResetHover","bestSolution","setBestSolution","toggleStartHover","toggleResetHover","className","noValidate","autoComplete","TextField","defaultValue","onChange","e","newData","target","value","label","variant","onClick","setTimeout","result","undefined","onMouseEnter","onMouseLeave","style","fontSize","fontWeight","fontFamily","color","marginTop","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.26b2fa76.chunk.js","sourcesContent":["import { City } from './../model/model';\r\n\r\nexport const cities: City[] = [\r\n  {\r\n    id: 0,\r\n    latitude: 50.062958,\r\n    longitude: 19.938377,\r\n    demand: 0,\r\n    name: 'Kraków',\r\n  },\r\n  {\r\n    id: 1,\r\n    latitude: 53.1276046,\r\n    longitude: 23.0858554,\r\n    demand: 500,\r\n    name: 'Białystok',\r\n  },\r\n  {\r\n    id: 2,\r\n    latitude: 49.8121789,\r\n    longitude: 18.9670518,\r\n    demand: 50,\r\n    name: 'Bielsko-Biała',\r\n  },\r\n  {\r\n    id: 3,\r\n    latitude: 50.1287598,\r\n    longitude: 19.2884881,\r\n    demand: 400,\r\n    name: 'Chrzanów',\r\n  },\r\n  {\r\n    id: 4,\r\n    latitude: 54.3610059,\r\n    longitude: 18.5496047,\r\n    demand: 200,\r\n    name: 'Gdańsk',\r\n  },\r\n  {\r\n    id: 5,\r\n    latitude: 54.5038045,\r\n    longitude: 18.3932687,\r\n    demand: 100,\r\n    name: 'Gdynia',\r\n  },\r\n  {\r\n    id: 6,\r\n    latitude: 50.3012185,\r\n    longitude: 18.3932687,\r\n    demand: 40,\r\n    name: 'Gliwice',\r\n  },\r\n  {\r\n    id: 7,\r\n    latitude: 49.8390228,\r\n    longitude: 20.9450616,\r\n    demand: 200,\r\n    name: 'Gromnik',\r\n  },\r\n  {\r\n    id: 8,\r\n    latitude: 50.2136512,\r\n    longitude: 18.9369822,\r\n    demand: 300,\r\n    name: 'Katowice',\r\n  },\r\n  {\r\n    id: 9,\r\n    latitude: 50.8540189,\r\n    longitude: 20.5454309,\r\n    demand: 30,\r\n    name: 'Kielce',\r\n  },\r\n  {\r\n    id: 10,\r\n    latitude: 49.6896495,\r\n    longitude: 21.7166586,\r\n    demand: 60,\r\n    name: 'Krosno',\r\n  },\r\n  {\r\n    id: 11,\r\n    latitude: 49.4154478,\r\n    longitude: 20.898955,\r\n    demand: 50,\r\n    name: 'Krynica',\r\n  },\r\n  {\r\n    id: 12,\r\n    latitude: 51.218088,\r\n    longitude: 22.4935597,\r\n    demand: 60,\r\n    name: 'Lublin',\r\n  },\r\n  {\r\n    id: 13,\r\n    latitude: 51.7730343,\r\n    longitude: 19.3401699,\r\n    demand: 160,\r\n    name: 'Łódź',\r\n  },\r\n  {\r\n    id: 14,\r\n    latitude: 54.0286482,\r\n    longitude: 19.0084415,\r\n    demand: 100,\r\n    name: 'Malbork',\r\n  },\r\n  {\r\n    id: 15,\r\n    latitude: 49.4892464,\r\n    longitude: 19.9737208,\r\n    demand: 120,\r\n    name: 'Nowy Targ',\r\n  },\r\n  {\r\n    id: 16,\r\n    latitude: 53.7759903,\r\n    longitude: 20.3956593,\r\n    demand: 300,\r\n    name: 'Olsztyn',\r\n  },\r\n  {\r\n    id: 17,\r\n    latitude: 52.4004458,\r\n    longitude: 16.7615834,\r\n    demand: 100,\r\n    name: 'Poznań',\r\n  },\r\n  {\r\n    id: 18,\r\n    latitude: 51.4254995,\r\n    longitude: 21.9046281,\r\n    demand: 200,\r\n    name: 'Puławy',\r\n  },\r\n  {\r\n    id: 19,\r\n    latitude: 51.4150447,\r\n    longitude: 21.0839343,\r\n    demand: 100,\r\n    name: 'Radom',\r\n  },\r\n  {\r\n    id: 20,\r\n    latitude: 50.0054089,\r\n    longitude: 21.9184153,\r\n    demand: 60,\r\n    name: 'Rzeszów',\r\n  },\r\n  {\r\n    id: 21,\r\n    latitude: 50.6780941,\r\n    longitude: 21.675572,\r\n    demand: 200,\r\n    name: 'Sandomierz',\r\n  },\r\n  {\r\n    id: 22,\r\n    latitude: 53.4296143,\r\n    longitude: 14.4845414,\r\n    demand: 150,\r\n    name: 'Szczecin',\r\n  },\r\n  {\r\n    id: 23,\r\n    latitude: 50.3096329,\r\n    longitude: 21.0617624,\r\n    demand: 60,\r\n    name: 'Szczucin',\r\n  },\r\n  {\r\n    id: 24,\r\n    latitude: 50.8142546,\r\n    longitude: 15.3965229,\r\n    demand: 50,\r\n    name: 'Szklarska Poręba',\r\n  },\r\n  {\r\n    id: 25,\r\n    latitude: 50.0261227,\r\n    longitude: 20.9068665,\r\n    demand: 70,\r\n    name: 'Tarnów',\r\n  },\r\n  {\r\n    id: 26,\r\n    latitude: 52.232855,\r\n    longitude: 20.9211117,\r\n    demand: 200,\r\n    name: 'Warszawa',\r\n  },\r\n  {\r\n    id: 27,\r\n    latitude: 49.9875567,\r\n    longitude: 20.0286001,\r\n    demand: 90,\r\n    name: 'Wieliczka',\r\n  },\r\n  {\r\n    id: 28,\r\n    latitude: 51.1269942,\r\n    longitude: 16.8517813,\r\n    demand: 40,\r\n    name: 'Wrocław',\r\n  },\r\n  {\r\n    id: 29,\r\n    latitude: 49.27587,\r\n    longitude: 19.9036652,\r\n    demand: 200,\r\n    name: 'Zakopane',\r\n  },\r\n  {\r\n    id: 30,\r\n    latitude: 50.7213772,\r\n    longitude: 23.2134076,\r\n    demand: 300,\r\n    name: 'Zamość',\r\n  },\r\n];\r\n\r\nexport const CAPACITY: number = 1000;\r\n\r\nexport const DEGREE_TO_KILOMETERS_FACTOR = 111.196672;\r\n\r\nexport const SET_PROBABILITY_0_20 = [\r\n  2,\r\n  2,\r\n  2,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n  2,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n  1,\r\n  2,\r\n  3,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n];\r\n","import { CAPACITY, DEGREE_TO_KILOMETERS_FACTOR, cities } from './Const';\r\nimport { Path, PathInfo, Solution, Population, City } from './../model/model';\r\n\r\nexport const isValidPath = (path: Path): boolean =>\r\n  path\r\n    .map((city) => city.demand)\r\n    .reduce((previous, current) => previous + current) <= CAPACITY;\r\n\r\nexport const analysePath = (path: Path): PathInfo => {\r\n  const cost = path\r\n    .map((city) => city.demand)\r\n    .reduce((previous, current) => previous + current);\r\n  const isValid = cost <= CAPACITY;\r\n  return {\r\n    cost,\r\n    isValid,\r\n  };\r\n};\r\n\r\nexport const analyseSolution = (solution: Solution) => {\r\n  const citiesIds: number[] = [];\r\n  solution.forEach((path) => path.forEach((city) => citiesIds.push(city.id)));\r\n  solution.forEach((path) => console.log(analysePath(path).isValid));\r\n  citiesIds.sort();\r\n  console.log(citiesIds);\r\n  console.log(`equal : ${new Set(citiesIds).size === citiesIds.length}`);\r\n};\r\n\r\nexport const getRandomInt = (min: number, maxExclusive: number) => {\r\n  min = Math.ceil(min);\r\n  maxExclusive = Math.floor(maxExclusive);\r\n  return Math.floor(Math.random() * (maxExclusive - min)) + min;\r\n};\r\n\r\nexport const getCitiesDistance = (city1: City, city2: City): number =>\r\n  Math.round(\r\n    Math.sqrt(\r\n      Math.pow(city1.longitude - city2.longitude, 2) +\r\n        Math.pow(city1.latitude - city2.latitude, 2)\r\n    ) * DEGREE_TO_KILOMETERS_FACTOR\r\n  );\r\n\r\nexport const getPathDistance = (path: Path): number =>\r\n  path.reduce((total, currentCity, currentIndex) => {\r\n    let previousCity: City;\r\n    let nextCity: City;\r\n    if (currentIndex === 0) {\r\n      previousCity = cities[0]; //kraków\r\n      nextCity = currentCity;\r\n    } else {\r\n      nextCity = currentCity;\r\n      previousCity = path[currentIndex - 1];\r\n    }\r\n    return !!nextCity && !!previousCity\r\n      ? total + getCitiesDistance(previousCity, nextCity)\r\n      : total;\r\n  }, 0);\r\n\r\nexport const copyCity = (city: City): City => Object.assign({} as City, city);\r\nexport const copyPath = (path: Path): Path =>\r\n  path.slice().map((city) => copyCity(city));\r\nexport const copySolution = (sol: Solution): Solution =>\r\n  sol.slice().map((path) => copyPath(path));\r\nexport const copyPopulation = (pop: Population): Population =>\r\n  pop.slice().map((sol) => copySolution(sol));\r\n\r\nexport const getSolutionQuality = (solution: Solution): number =>\r\n  solution.reduce((acc, path) => (acc += getPathDistance(path)), 0);\r\n\r\n// export const CompareSolutionsByDistanceAscending = (\r\n//   prevSolution: Solution,\r\n//   nextSolution: Solution\r\n// ) => getSolutionQuality(prevSolution) - getSolutionQuality(nextSolution);\r\n\r\nexport const printSolution = (sol: Solution) => {\r\n  console.log(`___________________________`);\r\n  sol.forEach((path, i) => {\r\n    console.log(\r\n      `Path nr ${i}: ${path.map((c) => c.id)}, cost: ${analysePath(path).cost}`\r\n    );\r\n  });\r\n};\r\n\r\nexport const getRandomSolutions = (population: Population): Population => {\r\n  const lastIndex = population.length - 1;\r\n  const freeSolutionIndexes = [...Array(lastIndex + 1)].map(\r\n    (_, index) => index\r\n  );\r\n  const randomSolution1Index =\r\n    freeSolutionIndexes[getRandomInt(0, lastIndex + 1)];\r\n  freeSolutionIndexes.splice(randomSolution1Index, 1);\r\n  const randomSolution2Index = freeSolutionIndexes[getRandomInt(0, lastIndex)];\r\n  freeSolutionIndexes.splice(randomSolution2Index, 1);\r\n\r\n  const randomSolution1: Solution = [...population[randomSolution1Index]];\r\n  const randomSolution2: Solution = [...population[randomSolution2Index]];\r\n  return [randomSolution1, randomSolution2];\r\n};\r\n\r\nexport const hasPathCity = (path: Path, city: City) =>\r\n  !!~path.findIndex((c) => c.id === city.id);\r\n","import { CAPACITY } from './Const';\r\nimport { City, Population, Solution } from './../model/model';\r\nimport { getRandomInt, analysePath } from './helpers';\r\n\r\nexport const generateRandomPopulation = (\r\n  count: number,\r\n  cities: City[]\r\n): Population => [...Array(count)].map(() => generateRandomSolution(cities));\r\n\r\nexport const generateRandomSolution = (cities: City[]): Solution => {\r\n  const solution: Solution = [[], [], [], [], []];\r\n  const citiesCopy = cities.slice();\r\n\r\n  solution.forEach((path) => {\r\n    const randomCityId = getRandomInt(1, citiesCopy.length);\r\n    path.push(citiesCopy[randomCityId]);\r\n    citiesCopy.splice(randomCityId, 1);\r\n  });\r\n\r\n  while (citiesCopy.length > 1) {\r\n    const randomCityIndex = getRandomInt(1, citiesCopy.length);\r\n    const randomCityDemand = citiesCopy[randomCityIndex].demand;\r\n    const freeCarIndex = solution.findIndex(\r\n      (path) => analysePath(path).cost + randomCityDemand <= CAPACITY\r\n    );\r\n    if (~freeCarIndex) {\r\n      solution[freeCarIndex].push(citiesCopy[randomCityIndex]);\r\n      citiesCopy.splice(randomCityIndex, 1);\r\n    }\r\n  }\r\n  return solution;\r\n};\r\n","import { generateRandomPopulation } from './../commons/solutionGenerator';\r\nimport { SET_PROBABILITY_0_20, cities } from './../commons/Const';\r\nimport { Solution, City, Path, Population } from './../model/model';\r\nimport {\r\n  getSolutionQuality,\r\n  copyPopulation,\r\n  getRandomInt,\r\n  hasPathCity,\r\n  getRandomSolutions,\r\n} from './../commons/helpers';\r\n\r\n// const CompareSolutionsByDistanceAscending = (\r\n//   prevSolution: Solution,\r\n//   nextSolution: Solution\r\n// ) => getSolutionQuality(prevSolution) - getSolutionQuality(nextSolution);\r\n\r\nexport const geneticAlgorithm = (\r\n  basePopulationCount: number,\r\n  generations: number\r\n) => {\r\n  const basePopulation: Population = generateRandomPopulation(\r\n    basePopulationCount,\r\n    cities\r\n  );\r\n  basePopulation.sort(\r\n    (prevSolution, nextSolution) =>\r\n      getSolutionQuality(prevSolution) - getSolutionQuality(nextSolution)\r\n  );\r\n\r\n  let basePopulationCopy: Population = copyPopulation(basePopulation);\r\n\r\n  let bestStartQuality = getSolutionQuality(basePopulation[0]);\r\n  let crossovers = 0;\r\n  let mutations = 0;\r\n\r\n  console.log(\r\n    `Start: ${basePopulation.map((s: Solution) => getSolutionQuality(s))}`\r\n  );\r\n  [...Array(generations)].forEach((_, generationIndex) => {\r\n    if ((generationIndex + 1) % 10000 === 0)\r\n      console.log(`Powstałych generacji: ${generationIndex + 1}`);\r\n    // const bestSolution = basePopulationByQualityAsc[0]\r\n\r\n    //przygotowanie do krzyżowania\r\n    //losowanie dwóch osobników/rozwiązań\r\n    const [randomSolution1, randomSolution2] = getRandomSolutions(\r\n      basePopulationCopy\r\n    );\r\n    const aCityPathIndexIn1 = 0;\r\n    const aCityIndexInPath1 = 0;\r\n    const cityA: City = randomSolution1[aCityPathIndexIn1][aCityIndexInPath1];\r\n    const indexCityB = cities.findIndex(\r\n      (city) => city.demand === cityA.demand && city.id !== cityA.id\r\n    );\r\n\r\n    if (~indexCityB) {\r\n      // 1 warunek krzyżowania spełniony\r\n      const cityB = cities[indexCityB];\r\n\r\n      const bCityPathIndexIn1 = randomSolution1.findIndex((path: Path) =>\r\n        hasPathCity(path, cityB)\r\n      );\r\n      const bCityPathIndexIn2 = randomSolution2.findIndex((path: Path) =>\r\n        hasPathCity(path, cityB)\r\n      );\r\n      const aCityPathIndexIn2 = randomSolution2.findIndex((path: Path) =>\r\n        hasPathCity(path, cityA)\r\n      );\r\n\r\n      // zamiana w pierwszym rozwiązaniu\r\n\r\n      const bCityIndexInPath1 = randomSolution1[bCityPathIndexIn1].findIndex(\r\n        (city: City) => city.id === cityB.id\r\n      );\r\n      // zamiana A -> B\r\n      randomSolution1[aCityPathIndexIn1][aCityIndexInPath1] = cityB;\r\n      //zamiana B -> A\r\n      randomSolution1[bCityPathIndexIn1][bCityIndexInPath1] = cityA;\r\n\r\n      //zamiana w drugim rozwiązaniu\r\n      const bCityIndexInPath2 = randomSolution2[bCityPathIndexIn2].findIndex(\r\n        (city: City) => city.id === cityB.id\r\n      );\r\n      const aCityIndexInPath2 = randomSolution2[aCityPathIndexIn2].findIndex(\r\n        (city: City) => city.id === cityA.id\r\n      );\r\n      // zamiana A -> B\r\n      randomSolution2[aCityPathIndexIn2][aCityIndexInPath2] = cityB;\r\n      // zamiana B -> A\r\n      randomSolution2[bCityPathIndexIn2][bCityIndexInPath2] = cityA;\r\n\r\n      const solution1Quality = getSolutionQuality(randomSolution1);\r\n      const solution2Quality = getSolutionQuality(randomSolution2);\r\n      const currentBestQuality = basePopulation.map((s: Solution) =>\r\n        getSolutionQuality(s)\r\n      )[0];\r\n\r\n      const newBestSolution =\r\n        solution1Quality === solution2Quality\r\n          ? randomSolution2\r\n          : solution1Quality < solution2Quality\r\n          ? randomSolution1\r\n          : randomSolution2;\r\n      const newBestQuality = getSolutionQuality(newBestSolution);\r\n      if (newBestQuality < currentBestQuality) {\r\n        basePopulation.splice(basePopulation.length - 1, 1);\r\n        basePopulation.push(newBestSolution);\r\n        basePopulation.sort(\r\n          (prevSolution, nextSolution) =>\r\n            getSolutionQuality(prevSolution) - getSolutionQuality(nextSolution)\r\n        );\r\n        crossovers++;\r\n        console.log(\r\n          `najlepsza jakość dotychczas: ${\r\n            basePopulation.map((s: Solution) => getSolutionQuality(s))[0]\r\n          }`\r\n        );\r\n      }\r\n      //ocena otrzymanych rozwiązań :\r\n      basePopulationCopy = copyPopulation(basePopulation);\r\n      // console.log(\r\n      //     `populacja bazowa po krzyżowaniu i sorcie : ${basePopulation.map((s) =>\r\n      //         getSolutionQuality(s)\r\n      //     )}`\r\n      // );\r\n    } else {\r\n      //   console.log(`corresponding city not found, next generation`);\r\n    }\r\n\r\n    //mutacja\r\n\r\n    const mutateRandomIndex = getRandomInt(0, SET_PROBABILITY_0_20.length);\r\n    const mutateOn: boolean = SET_PROBABILITY_0_20[mutateRandomIndex] % 2 === 0;\r\n\r\n    if (mutateOn) {\r\n      const randomSolutionIndex = getRandomInt(0, basePopulationCopy.length);\r\n      const randomSolution = basePopulationCopy[randomSolutionIndex];\r\n      const randomSolutionInitialQuality = getSolutionQuality(randomSolution);\r\n      const randomPathIndex = getRandomInt(0, randomSolution.length);\r\n      const randomPath = randomSolution[randomPathIndex];\r\n      const randomCityIndex1 = getRandomInt(0, randomPath.length);\r\n      const randomCityIndex2 = Math.abs(randomCityIndex1 - 1);\r\n      const cityA = randomPath[randomCityIndex1];\r\n      const cityB = randomPath[randomCityIndex2];\r\n      randomPath[randomCityIndex1] = cityB;\r\n      randomPath[randomCityIndex2] = cityA;\r\n      const randomSolutionPostMutationQuality = getSolutionQuality(\r\n        randomSolution\r\n      );\r\n      if (randomSolutionInitialQuality > randomSolutionPostMutationQuality) {\r\n        mutations++;\r\n        // console.log(\r\n        //   `Mutation did occur and improved solution by ${\r\n        //     randomSolutionInitialQuality - randomSolutionPostMutationQuality\r\n        //   } kilometers.`\r\n        // );\r\n        if (randomSolutionIndex === 0) {\r\n          // console.log(\r\n          //   `mutacja najlepszego : ${basePopulation.map((s: Solution) =>\r\n          //     getSolutionQuality(s)\r\n          //   )}`\r\n          // );\r\n          basePopulation[randomSolutionIndex] = randomSolution;\r\n        }\r\n      }\r\n      basePopulationCopy = copyPopulation(basePopulation);\r\n      basePopulation.sort(\r\n        (prevSolution, nextSolution) =>\r\n          getSolutionQuality(prevSolution) - getSolutionQuality(nextSolution)\r\n      );\r\n    }\r\n  }); //koniec petli iteracji/generacji\r\n\r\n  // console.log(\r\n  //   `Qualities after algorithm execution : ${basePopulation.map((s: Solution) =>\r\n  //     getSolutionQuality(s)\r\n  //   )}`\r\n  // );\r\n  const bestEndQuality = getSolutionQuality(basePopulation[0]);\r\n  return {\r\n    bestStartQuality,\r\n    bestEndQuality,\r\n    crossovers,\r\n    mutations,\r\n    solution: basePopulation[0],\r\n  };\r\n  //   analyseSolution(basePopulation[0]);\r\n};\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './App.css';\r\nimport { geneticAlgorithm } from './algorithm/algorithm';\r\nimport { Solution } from './model/model';\r\nimport { analysePath } from './commons/helpers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [populationSize, setPopulationSize] = useState<number>(50);\r\n  const [generations, setGenerations] = useState<number>(100);\r\n\r\n  const [crossovers, setCrossovers] = useState<number>(0);\r\n  const [mutations, setMutations] = useState<number>(0);\r\n\r\n  const [bestStartQuality, setBestStartQuality] = useState<number>(0);\r\n  const [bestEndQuality, setBestEndQuality] = useState<number>(0);\r\n\r\n  const [isRunning, setIsRunning] = useState<boolean>(false);\r\n\r\n  const [startHover, setStartHover] = useState<boolean>(false);\r\n  const [resetHover, setResetHover] = useState<boolean>(false);\r\n\r\n  const [bestSolution, setBestSolution] = useState<Solution | null>(null);\r\n\r\n  const onPopulationSizeChange = (e: any) => {\r\n    const newData = e.target.value;\r\n    setPopulationSize(+newData);\r\n  };\r\n\r\n  const onGenerationsNumberChange = (e: any) => {\r\n    const newData = e.target.value;\r\n    setGenerations(+newData);\r\n  };\r\n\r\n  const onStart = () => {\r\n    if (!isRunning && !!+generations && !!+populationSize && +populationSize !== 1) {\r\n      setIsRunning(true);\r\n      setTimeout(() => {\r\n        const result = geneticAlgorithm(populationSize, generations);\r\n        setIsRunning(false);\r\n        const {\r\n          bestStartQuality,\r\n          bestEndQuality,\r\n          mutations,\r\n          crossovers,\r\n          solution,\r\n        } = result;\r\n        setBestStartQuality(bestStartQuality);\r\n        setBestEndQuality(bestEndQuality);\r\n        setMutations(mutations);\r\n        setCrossovers(crossovers);\r\n        setBestSolution(solution);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  const onReset = () => {\r\n    if (!isRunning) {\r\n      setBestStartQuality(0);\r\n      setBestEndQuality(0);\r\n      setCrossovers(0);\r\n      setMutations(0);\r\n      setBestSolution(null);\r\n    }\r\n  };\r\n\r\n  const toggleStartHover = () => {\r\n    setStartHover(!startHover);\r\n  };\r\n\r\n  const toggleResetHover = () => {\r\n    setResetHover(!resetHover);\r\n  };\r\n\r\n  return (\r\n    <div className='App'>\r\n      <div className='container'>\r\n        <h2>Zastosowanie algorytmu genetycznego do rozwiązania CVRP</h2>\r\n        <form className={classes.root} noValidate autoComplete='off'>\r\n          <TextField\r\n            defaultValue={populationSize}\r\n            onChange={onPopulationSizeChange}\r\n            id='filled-basic'\r\n            label='Rozmiar populacji'\r\n            variant='filled'\r\n          />\r\n          <TextField\r\n            defaultValue={generations}\r\n            onChange={onGenerationsNumberChange}\r\n            id='filled-basic'\r\n            label='Ilość generacji'\r\n            variant='filled'\r\n          />\r\n        </form>\r\n        <div className='buttons'>\r\n          <div\r\n            onClick={onStart}\r\n            id={startHover && !isRunning ? 'shadow' : undefined}\r\n            onMouseEnter={toggleStartHover}\r\n            onMouseLeave={toggleStartHover}\r\n            className={\r\n              isRunning ? 'startButtonDisabled' : 'startButtonEnabled'\r\n            }>\r\n            Start\r\n          </div>\r\n          <div\r\n            onClick={onReset}\r\n            id={resetHover && !isRunning ? 'shadow' : undefined}\r\n            onMouseEnter={toggleResetHover}\r\n            onMouseLeave={toggleResetHover}\r\n            className={\r\n              isRunning ? 'resetButtonDisabled' : 'resetButtonEnabled'\r\n            }>\r\n            Reset\r\n          </div>\r\n        </div>\r\n        {(isRunning || !!bestEndQuality) && (\r\n          <div className={'results'}>\r\n            <div className={'parameters'}>\r\n              <div\r\n                style={{\r\n                  fontSize: 11,\r\n                  fontWeight: 500,\r\n                  fontFamily: 'courier',\r\n                  color: 'white',\r\n                }}>\r\n                {`Jakość najlepszego rozwiązania populacji P0: ${bestStartQuality}`}\r\n              </div>\r\n              {isRunning && (\r\n                <div\r\n                  style={{\r\n                    marginTop: 10,\r\n                    fontSize: 11,\r\n                    fontWeight: 500,\r\n                    fontFamily: 'courier',\r\n                    color: 'white',\r\n                  }}>\r\n                  ...\r\n                </div>\r\n              )}\r\n              {!!bestEndQuality && (\r\n                <div\r\n                  style={{\r\n                    marginTop: 10,\r\n\r\n                    fontSize: 11,\r\n                    fontWeight: 500,\r\n                    fontFamily: 'courier',\r\n                    color: 'white',\r\n                  }}>\r\n                  {`Jakość najlepszego rozwiązania ostatniej generacji :${bestEndQuality}`}\r\n                </div>\r\n              )}\r\n              {!!bestSolution && (\r\n                <>\r\n                  <div\r\n                    style={{\r\n                      marginTop: 10,\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`Najlepsze rozwiązanie :`}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`* Auto nr 1 : [${bestSolution[0].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[0]).cost}`}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`* Auto nr 2 : [${bestSolution[1].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[1]).cost}`}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`* Auto nr 3 : [${bestSolution[2].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[2]).cost}`}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`* Auto nr 4 : [${bestSolution[3].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[3]).cost}`}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: 11,\r\n                      fontWeight: 500,\r\n                      fontFamily: 'courier',\r\n                      color: 'white',\r\n                    }}>\r\n                    {`* Auto nr 5 : [${bestSolution[4].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[4]).cost}`}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className={'separator'} />\r\n            <div className={'generations'}>\r\n              <div\r\n                style={{\r\n                  fontSize: 11,\r\n                  fontWeight: 500,\r\n                  fontFamily: 'courier',\r\n                  color: 'white',\r\n                }}>\r\n                {`Udanych krzyżowań: ${crossovers}`}\r\n              </div>\r\n              <div\r\n                style={{\r\n                  fontSize: 11,\r\n                  fontWeight: 500,\r\n                  fontFamily: 'courier',\r\n                  color: 'white',\r\n                }}>\r\n                {`Udanych mutacji: ${mutations}`}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport './App.css';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}