{"version":3,"sources":["commons/Const.ts","commons/helpers.ts","commons/solutionGenerator.ts","algorithm/algorithm.ts","App.tsx","index.tsx"],"names":["cities","id","latitude","longitude","demand","name","CAPACITY","SET_PROBABILITY_0_20","analysePath","path","cost","map","city","reduce","previous","current","isValid","getRandomInt","min","maxExclusive","Math","ceil","floor","random","getCitiesDistance","city1","city2","toRad","x","PI","longitude1","latitude1","longitude2","latitude2","dLat","dLon","a","sin","cos","atan2","sqrt","copyPopulation","pop","slice","sol","copyPath","copySolution","getSolutionQuality","solution","acc","total","fromDepot","toDepot","length","forEach","index","getPathDistance","CompareSolutionsByDistanceAscending","prevSolution","nextSolution","hasPathCity","findIndex","c","generateRandomSolution","citiesCopy","randomCityId","push","splice","randomCityIndex","randomCityDemand","console","log","freeCarIndex","geneticAlgorithm","basePopulationCount","generations","count","basePopulation","Array","sort","basePopulationCopy","bestStartQuality","crossovers","mutations","_","generationIndex","population","lastIndex","round","freeSolutionIndexes","randomSolution1Index","randomSolution2Index","getSolutionsForCrossover","randomSolution1","randomSolution2","cityA","indexCityB","cityB","bCityPathIndexIn1","bCityPathIndexIn2","aCityPathIndexIn2","bCityIndexInPath1","bCityIndexInPath2","aCityIndexInPath2","solution1Quality","solution2Quality","currentBestQuality","s","newBestSolution","mutateRandomIndex","randomSolutionIndex","randomSolution","randomSolutionInitialQuality","randomPath","randomCityIndex1","randomCityIndex2","abs","bestEndSolution","bestEndQuality","styles","textStyle","fontSize","fontWeight","fontFamily","color","withMargin","marginTop","useStyles","makeStyles","theme","root","margin","spacing","width","App","classes","useState","populationSize","setPopulationSize","setGenerations","setCrossovers","setMutations","setBestStartQuality","setBestEndQuality","isRunning","setIsRunning","startHover","setStartHover","resetHover","setResetHover","bestSolution","setBestSolution","toggleStartHover","toggleResetHover","className","noValidate","autoComplete","TextField","defaultValue","onChange","e","newData","target","value","label","variant","onClick","setTimeout","result","citiesIds","valid","some","analyseSolution","undefined","onMouseEnter","onMouseLeave","style","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.fcab58e3.chunk.js","sourcesContent":["import { City } from \"./../model/model\";\r\n\r\nexport const cities: City[] = [\r\n  {\r\n    id: 0,\r\n    latitude: 50.062958,\r\n    longitude: 19.938377,\r\n    demand: 0,\r\n    name: 'Kraków',\r\n  },\r\n  {\r\n    id: 1,\r\n    latitude: 53.1276046,\r\n    longitude: 23.0858554,\r\n    demand: 500,\r\n    name: 'Białystok',\r\n  },\r\n  {\r\n    id: 2,\r\n    latitude: 49.8121789,\r\n    longitude: 18.9670518,\r\n    demand: 50,\r\n    name: 'Bielsko-Biała',\r\n  },\r\n  {\r\n    id: 3,\r\n    latitude: 50.1287598,\r\n    longitude: 19.2884881,\r\n    demand: 400,\r\n    name: 'Chrzanów',\r\n  },\r\n  {\r\n    id: 4,\r\n    latitude: 54.3610059,\r\n    longitude: 18.5496047,\r\n    demand: 200,\r\n    name: 'Gdańsk',\r\n  },\r\n  {\r\n    id: 5,\r\n    latitude: 54.5038045,\r\n    longitude: 18.3932687,\r\n    demand: 100,\r\n    name: 'Gdynia',\r\n  },\r\n  {\r\n    id: 6,\r\n    latitude: 50.3012185,\r\n    longitude: 18.3932687,\r\n    demand: 40,\r\n    name: 'Gliwice',\r\n  },\r\n  {\r\n    id: 7,\r\n    latitude: 49.8390228,\r\n    longitude: 20.9450616,\r\n    demand: 200,\r\n    name: 'Gromnik',\r\n  },\r\n  {\r\n    id: 8,\r\n    latitude: 50.2136512,\r\n    longitude: 18.9369822,\r\n    demand: 300,\r\n    name: 'Katowice',\r\n  },\r\n  {\r\n    id: 9,\r\n    latitude: 50.8540189,\r\n    longitude: 20.5454309,\r\n    demand: 30,\r\n    name: 'Kielce',\r\n  },\r\n  {\r\n    id: 10,\r\n    latitude: 49.6896495,\r\n    longitude: 21.7166586,\r\n    demand: 60,\r\n    name: 'Krosno',\r\n  },\r\n  {\r\n    id: 11,\r\n    latitude: 49.4154478,\r\n    longitude: 20.898955,\r\n    demand: 50,\r\n    name: 'Krynica',\r\n  },\r\n  {\r\n    id: 12,\r\n    latitude: 51.218088,\r\n    longitude: 22.4935597,\r\n    demand: 60,\r\n    name: 'Lublin',\r\n  },\r\n  {\r\n    id: 13,\r\n    latitude: 51.7730343,\r\n    longitude: 19.3401699,\r\n    demand: 160,\r\n    name: 'Łódź',\r\n  },\r\n  {\r\n    id: 14,\r\n    latitude: 54.0286482,\r\n    longitude: 19.0084415,\r\n    demand: 100,\r\n    name: 'Malbork',\r\n  },\r\n  {\r\n    id: 15,\r\n    latitude: 49.4892464,\r\n    longitude: 19.9737208,\r\n    demand: 120,\r\n    name: 'Nowy Targ',\r\n  },\r\n  {\r\n    id: 16,\r\n    latitude: 53.7759903,\r\n    longitude: 20.3956593,\r\n    demand: 300,\r\n    name: 'Olsztyn',\r\n  },\r\n  {\r\n    id: 17,\r\n    latitude: 52.4004458,\r\n    longitude: 16.7615834,\r\n    demand: 100,\r\n    name: 'Poznań',\r\n  },\r\n  {\r\n    id: 18,\r\n    latitude: 51.4254995,\r\n    longitude: 21.9046281,\r\n    demand: 200,\r\n    name: 'Puławy',\r\n  },\r\n  {\r\n    id: 19,\r\n    latitude: 51.4150447,\r\n    longitude: 21.0839343,\r\n    demand: 100,\r\n    name: 'Radom',\r\n  },\r\n  {\r\n    id: 20,\r\n    latitude: 50.0054089,\r\n    longitude: 21.9184153,\r\n    demand: 60,\r\n    name: 'Rzeszów',\r\n  },\r\n  {\r\n    id: 21,\r\n    latitude: 50.6780941,\r\n    longitude: 21.675572,\r\n    demand: 200,\r\n    name: 'Sandomierz',\r\n  },\r\n  {\r\n    id: 22,\r\n    latitude: 53.4296143,\r\n    longitude: 14.4845414,\r\n    demand: 150,\r\n    name: 'Szczecin',\r\n  },\r\n  {\r\n    id: 23,\r\n    latitude: 50.3096329,\r\n    longitude: 21.0617624,\r\n    demand: 60,\r\n    name: 'Szczucin',\r\n  },\r\n  {\r\n    id: 24,\r\n    latitude: 50.8142546,\r\n    longitude: 15.3965229,\r\n    demand: 50,\r\n    name: 'Szklarska Poręba',\r\n  },\r\n  {\r\n    id: 25,\r\n    latitude: 50.0261227,\r\n    longitude: 20.9068665,\r\n    demand: 70,\r\n    name: 'Tarnów',\r\n  },\r\n  {\r\n    id: 26,\r\n    latitude: 52.232855,\r\n    longitude: 20.9211117,\r\n    demand: 200,\r\n    name: 'Warszawa',\r\n  },\r\n  {\r\n    id: 27,\r\n    latitude: 49.9875567,\r\n    longitude: 20.0286001,\r\n    demand: 90,\r\n    name: 'Wieliczka',\r\n  },\r\n  {\r\n    id: 28,\r\n    latitude: 51.1269942,\r\n    longitude: 16.8517813,\r\n    demand: 40,\r\n    name: 'Wrocław',\r\n  },\r\n  {\r\n    id: 29,\r\n    latitude: 49.27587,\r\n    longitude: 19.9036652,\r\n    demand: 200,\r\n    name: 'Zakopane',\r\n  },\r\n  {\r\n    id: 30,\r\n    latitude: 50.7213772,\r\n    longitude: 23.2134076,\r\n    demand: 300,\r\n    name: 'Zamość',\r\n  },\r\n];\r\n\r\nexport const CAPACITY: number = 1000;\r\n\r\nexport const SET_PROBABILITY_0_20 = [\r\n  2,\r\n  2,\r\n  2,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n  2,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n  1,\r\n  2,\r\n  3,\r\n  1,\r\n  3,\r\n  1,\r\n  3,\r\n];\r\n","import { CAPACITY, cities } from './Const';\r\nimport { Path, PathInfo, Solution, Population, City } from './../model/model';\r\n\r\nexport const isValidPath = (path: Path): boolean =>\r\n  path\r\n    .map((city) => city.demand)\r\n    .reduce((previous, current) => previous + current) <= CAPACITY;\r\n\r\nexport const analysePath = (path: Path): PathInfo => {\r\n  const cost = path\r\n    .map((city) => city.demand)\r\n    .reduce((previous, current) => previous + current);\r\n  const isValid = cost <= CAPACITY;\r\n  return {\r\n    cost,\r\n    isValid,\r\n  };\r\n};\r\n\r\nexport const analyseSolution = (solution: Solution) => {\r\n  const citiesIds: number[] = [];\r\n  solution.forEach((path) => path.forEach((city) => citiesIds.push(city.id)));\r\n  const valid = !solution.some((path) => !!!analysePath(path).isValid);\r\n  console.log(`miast : ${citiesIds.length}, każde auto maks. 1000 : ${valid}`);\r\n};\r\n\r\nexport const getRandomInt = (min: number, maxExclusive: number) => {\r\n  min = Math.ceil(min);\r\n  maxExclusive = Math.floor(maxExclusive);\r\n  return Math.floor(Math.random() * (maxExclusive - min)) + min;\r\n};\r\n\r\nexport const getCitiesDistance = (city1: City, city2: City): number => {\r\n  const toRad = (x: number) => {\r\n    return (x * Math.PI) / 180;\r\n  };\r\n  const longitude1 = city1.longitude;\r\n  const latitude1 = city1.latitude;\r\n  const longitude2 = city2.longitude;\r\n  const latitude2 = city2.latitude;\r\n\r\n  const averageRadius = 6371;\r\n\r\n  var x1 = latitude2 - latitude1;\r\n  var dLat = toRad(x1);\r\n  var x2 = longitude2 - longitude1;\r\n  var dLon = toRad(x2);\r\n  var a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(toRad(latitude1)) *\r\n      Math.cos(toRad(latitude2)) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  var distance = averageRadius * c;\r\n  return distance;\r\n};\r\n\r\nexport const getPathDistance = (path: Path): number => {\r\n  let total: number = 0;\r\n  const fromDepot = getCitiesDistance(cities[0], path[0]);\r\n  const toDepot = getCitiesDistance(cities[0], path[path.length - 1]);\r\n\r\n  path.forEach((city, index) => {\r\n    if (index !== path.length - 1)\r\n      total += getCitiesDistance(city, path[index + 1]);\r\n  });\r\n  return total + fromDepot + toDepot;\r\n};\r\n\r\nexport const copyPath = (path: Path): Path => path.slice();\r\n\r\nexport const copySolution = (sol: Solution): Solution =>\r\n  sol.slice().map((path) => copyPath(path));\r\n\r\nexport const copyPopulation = (pop: Population): Population =>\r\n  pop.slice().map((sol) => copySolution(sol));\r\n\r\nexport const getSolutionQuality = (solution: Solution): number =>\r\n  solution.reduce((acc, path) => (acc += getPathDistance(path)), 0);\r\n\r\nexport const CompareSolutionsByDistanceAscending = (\r\n  prevSolution: Solution,\r\n  nextSolution: Solution\r\n) => getSolutionQuality(prevSolution) - getSolutionQuality(nextSolution);\r\n\r\nexport const getRandomSolutions = (population: Population): Population => {\r\n  //tworzenie populacji tymczasowej - reprodukcja obcinająca\r\n  const temporaryPopulation = population.slice(\r\n    0,\r\n    Math.round(population.length / 2)\r\n  );\r\n  const lastIndex = temporaryPopulation.length - 1;\r\n  const freeSolutionIndexes = [...Array(lastIndex + 1)].map(\r\n    (_, index) => index\r\n  );\r\n  const randomSolution1Index =\r\n    freeSolutionIndexes[getRandomInt(0, lastIndex + 1)];\r\n  freeSolutionIndexes.splice(randomSolution1Index, 1);\r\n  const randomSolution2Index = freeSolutionIndexes[getRandomInt(0, lastIndex)];\r\n  freeSolutionIndexes.splice(randomSolution2Index, 1);\r\n  const randomSolution1: Solution = [...population[randomSolution1Index]];\r\n  const randomSolution2: Solution = [...population[randomSolution2Index]];\r\n  return [randomSolution1, randomSolution2];\r\n};\r\n\r\nexport const hasPathCity = (path: Path, city: City) =>\r\n  !!~path.findIndex((c) => c.id === city.id);\r\n","import { CAPACITY } from './Const';\r\nimport { getRandomInt, analysePath } from './helpers';\r\nimport { City, Population, Solution } from './../model/model';\r\n\r\nexport const generateRandomPopulation = (\r\n  count: number,\r\n  cities: City[]\r\n): Population => [...Array(count)].map(() => generateRandomSolution(cities));\r\n\r\nexport const generateRandomSolution = (cities: City[]): Solution => {\r\n  const solution: Solution = [[], [], [], [], []];\r\n  const citiesCopy = cities.slice();\r\n\r\n  solution.forEach((path) => {\r\n    const randomCityId = getRandomInt(1, citiesCopy.length);\r\n    path.push(citiesCopy[randomCityId]);\r\n    citiesCopy.splice(randomCityId, 1);\r\n  });\r\n\r\n  do {\r\n    const randomCityIndex = getRandomInt(1, citiesCopy.length);\r\n    const randomCityDemand = citiesCopy[randomCityIndex].demand;\r\n    if (!randomCityDemand) console.log(randomCityDemand, randomCityIndex);\r\n    const freeCarIndex = solution.findIndex(\r\n      (path) => analysePath(path).cost + randomCityDemand <= CAPACITY\r\n    );\r\n    if (~freeCarIndex) {\r\n      solution[freeCarIndex].push(citiesCopy[randomCityIndex]);\r\n      citiesCopy.splice(randomCityIndex, 1);\r\n    }\r\n  } while (citiesCopy.length > 1);\r\n  return solution;\r\n};\r\n","import { generateRandomPopulation } from './../commons/solutionGenerator';\r\nimport { SET_PROBABILITY_0_20, cities } from './../commons/Const';\r\nimport {\r\n  City,\r\n  Path,\r\n  Solution,\r\n  Population,\r\n  AlgorithmResult,\r\n} from './../model/model';\r\nimport {\r\n  CompareSolutionsByDistanceAscending,\r\n  getSolutionQuality,\r\n  getRandomSolutions as getSolutionsForCrossover,\r\n  getRandomInt,\r\n  hasPathCity,\r\n  copyPopulation,\r\n} from './../commons/helpers';\r\n\r\nexport const geneticAlgorithm = (\r\n  basePopulationCount: number,\r\n  generations: number\r\n): AlgorithmResult => {\r\n  const basePopulation: Population = generateRandomPopulation(\r\n    basePopulationCount,\r\n    cities\r\n  );\r\n  basePopulation.sort(CompareSolutionsByDistanceAscending);\r\n\r\n  let basePopulationCopy: Population = copyPopulation(basePopulation);\r\n\r\n  let bestStartQuality = getSolutionQuality(basePopulation[0]);\r\n  let crossovers = 0;\r\n  let mutations = 0;\r\n\r\n  [...Array(generations)].forEach((_, generationIndex) => {\r\n    //przygotowanie do krzyżowania -losowanie dwóch osobników/rozwiązań z populacji tymczasowej\r\n    const [randomSolution1, randomSolution2] = getSolutionsForCrossover(\r\n      basePopulationCopy\r\n    );\r\n    const aCityPathIndexIn1 = 0;\r\n    const aCityIndexInPath1 = 0;\r\n    const cityA: City = randomSolution1[aCityPathIndexIn1][aCityIndexInPath1];\r\n    const indexCityB = cities.findIndex(\r\n      (city) => city.demand === cityA.demand && city.id !== cityA.id\r\n    );\r\n\r\n    if (~indexCityB) {\r\n      // 1 warunek krzyżowania spełniony - znaleziono miasto o tym samym zapotrzebowaniu na towar\r\n      const cityB = cities[indexCityB];\r\n\r\n      const bCityPathIndexIn1 = randomSolution1.findIndex((path: Path) =>\r\n        hasPathCity(path, cityB)\r\n      );\r\n      const bCityPathIndexIn2 = randomSolution2.findIndex((path: Path) =>\r\n        hasPathCity(path, cityB)\r\n      );\r\n      const aCityPathIndexIn2 = randomSolution2.findIndex((path: Path) =>\r\n        hasPathCity(path, cityA)\r\n      );\r\n\r\n      // zamiana w pierwszym rozwiązaniu\r\n      const bCityIndexInPath1 = randomSolution1[bCityPathIndexIn1].findIndex(\r\n        (city: City) => city.id === cityB.id\r\n      );\r\n\r\n      randomSolution1[aCityPathIndexIn1][aCityIndexInPath1] = cityB; // zamiana A -> B\r\n      randomSolution1[bCityPathIndexIn1][bCityIndexInPath1] = cityA; //zamiana B -> A\r\n\r\n      //zamiana w drugim rozwiązaniu\r\n      const bCityIndexInPath2 = randomSolution2[bCityPathIndexIn2].findIndex(\r\n        (city: City) => city.id === cityB.id\r\n      );\r\n      const aCityIndexInPath2 = randomSolution2[aCityPathIndexIn2].findIndex(\r\n        (city: City) => city.id === cityA.id\r\n      );\r\n\r\n      randomSolution2[aCityPathIndexIn2][aCityIndexInPath2] = cityB; // zamiana A -> B\r\n      randomSolution2[bCityPathIndexIn2][bCityIndexInPath2] = cityA; // zamiana B -> A\r\n\r\n      const solution1Quality = getSolutionQuality(randomSolution1);\r\n      const solution2Quality = getSolutionQuality(randomSolution2);\r\n      const currentBestQuality = basePopulation.map((s: Solution) =>\r\n        getSolutionQuality(s)\r\n      )[0];\r\n\r\n      const newBestSolution =\r\n        solution1Quality === solution2Quality\r\n          ? randomSolution2\r\n          : solution1Quality < solution2Quality\r\n          ? randomSolution1\r\n          : randomSolution2;\r\n      const newBestQuality = getSolutionQuality(newBestSolution);\r\n      if (newBestQuality < currentBestQuality) {\r\n        basePopulation.splice(basePopulation.length - 1, 1);\r\n        basePopulation.push(newBestSolution);\r\n        basePopulation.sort(CompareSolutionsByDistanceAscending);\r\n        crossovers++;\r\n      }\r\n      basePopulationCopy = copyPopulation(basePopulation);\r\n    }\r\n\r\n    //mutacja\r\n    const mutateRandomIndex = getRandomInt(0, SET_PROBABILITY_0_20.length);\r\n    const mutateOn: boolean = SET_PROBABILITY_0_20[mutateRandomIndex] % 2 === 0;\r\n\r\n    if (mutateOn) {\r\n      const randomSolutionIndex = getRandomInt(0, basePopulationCopy.length);\r\n      const randomSolution = basePopulationCopy[randomSolutionIndex];\r\n      const randomSolutionInitialQuality = getSolutionQuality(randomSolution);\r\n      const randomPathIndex = getRandomInt(0, randomSolution.length);\r\n      const randomPath = randomSolution[randomPathIndex];\r\n      //jeśli ścieżka zawiera tylko jedno miasto\r\n      if (randomPath.length !== 1) {\r\n        const randomCityIndex1 = getRandomInt(0, randomPath.length);\r\n        const randomCityIndex2 = Math.abs(randomCityIndex1 - 1);\r\n        const cityA = randomPath[randomCityIndex1];\r\n        const cityB = randomPath[randomCityIndex2];\r\n        randomPath[randomCityIndex1] = cityB;\r\n        randomPath[randomCityIndex2] = cityA;\r\n        const randomSolutionPostMutationQuality = getSolutionQuality(\r\n          randomSolution\r\n        );\r\n        if (randomSolutionInitialQuality > randomSolutionPostMutationQuality) {\r\n          mutations++;\r\n          if (randomSolutionIndex === 0)\r\n            basePopulation[randomSolutionIndex] = randomSolution;\r\n        }\r\n        basePopulationCopy = copyPopulation(basePopulation);\r\n        basePopulation.sort(CompareSolutionsByDistanceAscending);\r\n      }\r\n    }\r\n  }); //zakres pętli - koniec algorytmu\r\n\r\n  const bestEndSolution = basePopulation[0];\r\n  const bestEndQuality = getSolutionQuality(bestEndSolution);\r\n  return {\r\n    bestStartQuality,\r\n    bestEndQuality,\r\n    crossovers,\r\n    mutations,\r\n    bestEndSolution,\r\n  };\r\n};\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { geneticAlgorithm } from './algorithm/algorithm';\r\nimport { analysePath, analyseSolution } from './commons/helpers';\r\nimport './App.css';\r\nimport { Solution } from './model/model';\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [populationSize, setPopulationSize] = useState<number>(30);\r\n  const [generations, setGenerations] = useState<number>(25000);\r\n\r\n  const [crossovers, setCrossovers] = useState<number>(0);\r\n  const [mutations, setMutations] = useState<number>(0);\r\n\r\n  const [bestStartQuality, setBestStartQuality] = useState<number>(0);\r\n  const [bestEndQuality, setBestEndQuality] = useState<number>(0);\r\n\r\n  const [isRunning, setIsRunning] = useState<boolean>(false);\r\n\r\n  const [startHover, setStartHover] = useState<boolean>(false);\r\n  const [resetHover, setResetHover] = useState<boolean>(false);\r\n\r\n  const [bestSolution, setBestSolution] = useState<Solution | null>(null);\r\n\r\n  const onPopulationSizeChange = (e: any) => {\r\n    const newData = e.target.value;\r\n    setPopulationSize(+newData);\r\n  };\r\n\r\n  const onGenerationsNumberChange = (e: any) => {\r\n    const newData = e.target.value;\r\n    setGenerations(+newData);\r\n  };\r\n\r\n  const onStart = () => {\r\n    if (\r\n      !isRunning &&\r\n      !!+generations &&\r\n      !!+populationSize &&\r\n      +populationSize !== 1\r\n    ) {\r\n      setIsRunning(true);\r\n      setTimeout(() => {\r\n        const result = geneticAlgorithm(populationSize, generations);\r\n        setIsRunning(false);\r\n        const {\r\n          bestStartQuality,\r\n          bestEndQuality,\r\n          mutations,\r\n          crossovers,\r\n          bestEndSolution,\r\n        } = result;\r\n        setBestStartQuality(bestStartQuality);\r\n        setBestEndQuality(bestEndQuality);\r\n        setMutations(mutations);\r\n        setCrossovers(crossovers);\r\n        setBestSolution(bestEndSolution);\r\n        analyseSolution(bestEndSolution);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  const onReset = () => {\r\n    if (!isRunning) {\r\n      setBestStartQuality(0);\r\n      setBestEndQuality(0);\r\n      setCrossovers(0);\r\n      setMutations(0);\r\n      setBestSolution(null);\r\n    }\r\n  };\r\n\r\n  const toggleStartHover = () => {\r\n    setStartHover(!startHover);\r\n  };\r\n\r\n  const toggleResetHover = () => {\r\n    setResetHover(!resetHover);\r\n  };\r\n\r\n  return (\r\n    <div className='App'>\r\n      <div className='container'>\r\n        <h2>Zastosowanie algorytmu genetycznego do rozwiązania CVRP</h2>\r\n        <form className={classes.root} noValidate autoComplete='off'>\r\n          <TextField\r\n            defaultValue={populationSize}\r\n            onChange={onPopulationSizeChange}\r\n            id='filled-basic'\r\n            label='Rozmiar populacji'\r\n            variant='filled'\r\n          />\r\n          <TextField\r\n            defaultValue={generations}\r\n            onChange={onGenerationsNumberChange}\r\n            id='filled-basic'\r\n            label='Ilość generacji'\r\n            variant='filled'\r\n          />\r\n        </form>\r\n        <div className='buttons'>\r\n          <div\r\n            onClick={onStart}\r\n            id={startHover && !isRunning ? 'shadow' : undefined}\r\n            onMouseEnter={toggleStartHover}\r\n            onMouseLeave={toggleStartHover}\r\n            className={\r\n              isRunning ? 'startButtonDisabled' : 'startButtonEnabled'\r\n            }>\r\n            Start\r\n          </div>\r\n          <div\r\n            onClick={onReset}\r\n            id={resetHover && !isRunning ? 'shadow' : undefined}\r\n            onMouseEnter={toggleResetHover}\r\n            onMouseLeave={toggleResetHover}\r\n            className={\r\n              isRunning ? 'resetButtonDisabled' : 'resetButtonEnabled'\r\n            }>\r\n            Reset\r\n          </div>\r\n        </div>\r\n        {(isRunning || !!bestEndQuality) && (\r\n          <div className={'results'}>\r\n            <div className={'parameters'}>\r\n              <div style={styles.textStyle}>\r\n                {`Jakość najlepszego rozwiązania populacji P0 : ${Math.round(\r\n                  bestStartQuality\r\n                )}`}\r\n              </div>\r\n              {isRunning && <div style={styles.withMargin}>...</div>}\r\n              {!!bestEndQuality && (\r\n                <div\r\n                  style={{\r\n                    marginTop: 10,\r\n\r\n                    fontSize: 11,\r\n                    fontWeight: 500,\r\n                    fontFamily: 'Courier New',\r\n                    color: 'white',\r\n                  }}>\r\n                  {`Jakość najlepszego rozwiązania po egzekucji algorytmu : ${Math.round(\r\n                    bestEndQuality\r\n                  )}`}\r\n                </div>\r\n              )}\r\n              {!!bestSolution && (\r\n                <>\r\n                  <div style={styles.withMargin}>\r\n                    {`Najlepsze rozwiązanie :`}\r\n                  </div>\r\n                  <div style={styles.textStyle}>\r\n                    {`* Auto nr 1 : [${bestSolution[0].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[0]).cost}`}\r\n                  </div>\r\n                  <div style={styles.textStyle}>\r\n                    {`* Auto nr 2 : [${bestSolution[1].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[1]).cost}`}\r\n                  </div>\r\n                  <div style={styles.textStyle}>\r\n                    {`* Auto nr 3 : [${bestSolution[2].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[2]).cost}`}\r\n                  </div>\r\n                  <div style={styles.textStyle}>\r\n                    {`* Auto nr 4 : [${bestSolution[3].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[3]).cost}`}\r\n                  </div>\r\n                  <div style={styles.textStyle}>\r\n                    {`* Auto nr 5 : [${bestSolution[4].map(\r\n                      (c) => ` ${c.name} `\r\n                    )}], zapakowano: ${analysePath(bestSolution[4]).cost}`}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className={'separator'} />\r\n            <div className={'generations'}>\r\n              <div style={styles.textStyle}>\r\n                {`Udanych krzyżowań : ${crossovers}`}\r\n              </div>\r\n              <div style={styles.textStyle}>\r\n                {`Udanych mutacji : ${mutations}`}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  textStyle: {\r\n    fontSize: 11,\r\n    fontWeight: 500,\r\n    fontFamily: 'Courier New',\r\n    color: 'white',\r\n  },\r\n  withMargin: {\r\n    marginTop: 10,\r\n    fontSize: 11,\r\n    fontWeight: 500,\r\n    fontFamily: 'Courier New',\r\n    color: 'white',\r\n  },\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport './App.css';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}